# compute correlations
co <- apply(sst, 1, function(x) cor(x, precip_means))
co <- matrix(co, nrow = old_sst@nrows, ncol = old_sst@ncols)
dim(co)
tru <- old_sst[[1]]
tru <- as.matrix(tru)
tru[1:12,1:12]
co[1:12,1:12]
co <- matrix(co, nrow = old_sst@nrows, ncol = old_sst@ncols, byrow = FALSE)
dim(co)
co[1:12,1:12]
co <- matrix(co, nrow = old_sst@nrows, ncol = old_sst@ncols, byrow = TRUE)
co[1:12,1:12]
tru[1:12,1:12]
co[1:12,1:12]
options(digits = 3)
tru[1:12,1:12]
co[1:12,1:12]
options(digits = 2)
co[1:12,1:12]
options(digits = 1)
co[1:12,1:12]
options(digits = 0)
co[1:12,1:12]
tru[1:12,1:12]
co <- matrix(co, nrow = old_sst@nrows, ncol = old_sst@ncols, byrow = TRUE)
rara <- raster(co,
xmn = old_sst@extent@xmin, xmx = old_sst@extent@xmax,
ymn = old_sst@extent@ymin, ymx = old_sst@extent@ymax,
crs = old_sst@crs)
po <- rasterToPoints(rara)
df <- data.frame(po)
colnames(df) <- c("lon", "lat", "cor")
head(df)
ggplot(data = df, aes(x = lon, y = lat, fill = cor)) +
annotation_map(map_data("world")) +
geom_raster(interpolate = TRUE) +
#geom_polygon(aes(fill=sst, colour = "black")) +
scale_fill_viridis_c(option="A") +
theme_bw() +
coord_quickmap()
?raster
old_sst
resolution(old_sst)
rara <- raster(co,
xmn = old_sst@extent@xmin, xmx = old_sst@extent@xmax,
ymn = old_sst@extent@ymin, ymx = old_sst@extent@ymax,
crs = old_sst@crs, resolution = c(2,2))
rara <- raster(co, ext = old_sst@extent)
old_sst@extent
old_sst@extent[1]
old_sst@extent[2]
old_sst@extent[3]
old_sst@extent[4]
old_sst@extent[5]
rara <- raster(co,
xmn = old_sst@extent@xmin, xmx = old_sst@extent@xmax,
ymn = old_sst@extent@ymin, ymx = old_sst@extent@ymax,
crs = old_sst@crs, resolution = 2)
rara <- raster(co,
xmn = old_sst@extent@xmin, xmx = old_sst@extent@xmax,
ymn = old_sst@extent@ymin, ymx = old_sst@extent@ymax,
crs = old_sst@crs, resolution = c(2,2))
rara <- raster(co,
xmn = old_sst@extent@xmin, xmx = old_sst@extent@xmax,
ymn = old_sst@extent@ymin, ymx = old_sst@extent@ymax,
crs = old_sst@crs)
options(digits = 5)
po <- rasterToPoints(rara)
po
co
c(co)[1:10]
head(po)
co[1:10,1:10]
tru[1:10,1:10]
co[1:12,1:12]
tru[1:12,1:12]
co[1:12,1:12]
co <- matrix(co, nrow = old_sst@nrows, ncol = old_sst@ncols, byrow = TRUE)
dim(co)
which(is.na(co))
rara <- raster(co,
xmn = old_sst@extent@xmin, xmx = old_sst@extent@xmax,
ymn = old_sst@extent@ymin, ymx = old_sst@extent@ymax,
crs = old_sst@crs)
po <- rasterToPoints(rara)
head(po)
c(co)[1:10]
co[1:12,1:12]
# compute correlations
co <- apply(sst, 1, function(x) cor(x, precip_means))
co <- matrix(co, nrow = old_sst@nrows, ncol = old_sst@ncols, byrow = TRUE)
l1 <- old_sst[[1]]
co[1:12,1:12]
l1[1:12,1:12]
l1 <- as.matrix(old_sst[[1]])
co[1:12,1:12]
l1[1:12,1:12]
which(is.na(co)) == which(is.na(l1))
sum(which(is.na(co)) != which(is.na(l1)))
# nice both have same NAs
rara <- raster(co,
xmn = old_sst@extent@xmin, xmx = old_sst@extent@xmax,
ymn = old_sst@extent@ymin, ymx = old_sst@extent@ymax,
crs = old_sst@crs)
po <- rasterToPoints(rara)
head(po)
df <- data.frame(po)
colnames(df) <- c("lon", "lat", "cor")
head(df)
df[1:20,]
df[1:50,]
df[1:100,]
df[1:200,]
any(is.na(df$cor))
rara@data
rara[[1]]
as.matrix(rara[[1]])
any(is.na(as.matrix(rara[[1]]))
)
?rasterToPoints
# nice both have same NAs
rara <- raster(co,
xmn = old_sst@extent@xmin, xmx = old_sst@extent@xmax,
ymn = old_sst@extent@ymin, ymx = old_sst@extent@ymax,
crs = old_sst@crs, spatial = TRUE)
po <- rasterToPoints(rara, spatial = TRUE)
head(po)
df <- data.frame(po)
colnames(df) <- c("lon", "lat", "cor")
head(df)
any(is.na(df$cor))
# nice both have same NAs
rara <- raster(co,
xmn = old_sst@extent@xmin, xmx = old_sst@extent@xmax,
ymn = old_sst@extent@ymin, ymx = old_sst@extent@ymax,
crs = old_sst@crs)
po <- rasterToPoints(rara, spatial = TRUE)
head(po)
df <- data.frame(po)
head(df)
colnames(df) <- c("cor", "lon", "lat", "optional")
head(df)
any(is.na(df$cor))
cbind(xyFromCell(rara, 1:ncell(raster)), values(rara))
xyFromCell(rara, 1:ncell(raster))
cbind(xyFromCell(rara, 1:ncell(rara)), values(rara))
w <- cbind(xyFromCell(rara, 1:ncell(rara)), values(rara))
w <- as.data.frame(w)
colnames(w) <- c("lon", "lat", "corr")
head(w)
any(is.na(w$cor))
ggplot(data = w, aes(x = lon, y = lat, fill = cor)) +
annotation_map(map_data("world")) +
geom_raster(interpolate = TRUE) +
#geom_polygon(aes(fill=sst, colour = "black")) +
scale_fill_viridis_c(option="A") +
theme_bw() +
coord_quickmap()
ggplot(data = w, aes(x = lon, y = lat, fill = corr)) +
annotation_map(map_data("world")) +
geom_raster(interpolate = TRUE) +
#geom_polygon(aes(fill=sst, colour = "black")) +
scale_fill_viridis_c(option="A") +
theme_bw() +
coord_quickmap()
ggplot(data = w, aes(x = lon, y = lat, fill = corr)) +
annotation_map(map_data("world")) +
geom_raster(interpolate = TRUE) +
#geom_polygon(aes(fill=sst, colour = "black")) +
scale_fill_viridis_c(option="A") +
theme_bw() +
coord_quickmap()
wn <- w
wn$corr[abs(wn$corr)<0.8]
wn$corr[abs(wn$corr)<0.8] <- NA
ggplot(data = wn, aes(x = lon, y = lat, fill = corr)) +
annotation_map(map_data("world")) +
geom_raster(interpolate = TRUE) +
#geom_polygon(aes(fill=sst, colour = "black")) +
scale_fill_viridis_c(option="A") +
theme_bw() +
coord_quickmap()
wn <- w
wn$corr[abs(wn$corr)<0.8] <- 0
ggplot(data = wn, aes(x = lon, y = lat, fill = corr)) +
annotation_map(map_data("world")) +
geom_raster(interpolate = TRUE) +
#geom_polygon(aes(fill=sst, colour = "black")) +
scale_fill_viridis_c(option="A") +
theme_bw() +
coord_quickmap()
wn$corr[abs(wn$corr)<0.9] <- 0
wn <- w
wn$corr[abs(wn$corr)<0.9] <- 0
ggplot(data = wn, aes(x = lon, y = lat, fill = corr)) +
annotation_map(map_data("world")) +
geom_raster(interpolate = TRUE) +
#geom_polygon(aes(fill=sst, colour = "black")) +
scale_fill_viridis_c(option="A") +
theme_bw() +
coord_quickmap()
month.name
c(month.name, month.name)
paste("SST-", month.name)
knitr::opts_chunk$set(echo = TRUE)
rbind(paste("SST-", month.name), paste("Precip-", month.name)
)
?quantile
a <- c(1:10)
b <- c(1:10)
cor(a,b)
b <- c(10:20)
cor(a,b)
b <- c(10:19)
cor(a,b)
install.packages("genlasso")
edges = c(1,2,1,3,1,5,2,4,2,5,3,6,3,7,3,8,6,7,6,8)
gr = graph(edges=edges,directed=FALSE)
library(genlasso)
gr = graph(edges=edges,directed=FALSE)
plot(gr)
y = c(1,1,0,1,1,0,0,0) + rnorm(8,0.1)
y
a1 = fusedlasso(y, graph = gr)
D = getDgSparse(gr)
a2 = fusedlasso(y, D=D)
plot(a1, numbers = TRUE)
a1 = fusedlasso(y, graph = gr)
D = getDgSparse(gr)
a2 = fusedlasso(y, D=D)
plot(a1, numbers = TRUE)
?fusedlasso
?fusedlasso2d
library(genlasso)
set.seed(0)
edges = c(1,2,1,3,1,4,2,3,2,4,3,4)
gr = graph(edges = edges, directed = FALSE)
gr
plot(gr)
y = (1,2,3,4) + rnoerm(0,0.1)
y = (1,2,3,4) + rnorm(0,0.1)
y = c(1,2,3,4) + rnorm(0,0.1)
X = matrix(c(1,2,3,4,1,1,1,1,2,2,2,2,4,3,2,2),
nrow = 4, ncol = 4, byrow = TRUE)
X
X = matrix(c(1,2,3,4,1,1,1,1,2,2,2,2,4,3,2,2),
nrow = 4, ncol = 4, byrow = FALSE)
X
dim1 <- 2
dim2 <- 2
fusedlasso2d(y,X,dim1,dim2)
y
y = c(1,2,3,4) + rnorm(0,0.1)
fusedlasso2d(y,X,dim1,dim2)
y
y <- c(1,2,3,4) + rnorm(0,0.1)
fusedlasso2d(y,X,dim1,dim2)
fusedlasso2d(y = y,X,dim1,dim2)
fusedlasso2d(y = c(1,2,3,4) + rnorm(0,0.1),X,dim1,dim2)
X
X = matrix(c(1,2,3,4,1,1,1,1,2,2,2,2,4,3,2,2,4,4,3,3),
nrow = 4, ncol = 4, byrow = FALSE)
X
y
c(1,2,3,4) + rnorm(0,0.1)
rnorm(0,0.1)
c(1,2,3,4)
y <- c(1,2,3,4) + rnorm(4,0.1)
y
fusedlasso2d(y,X,dim1,dim2)
f <- fusedlasso2d(y,X,dim1,dim2)
plot(f)
row(X)
col(X)
a = matrix(runif(256), 16,16)
i = ()
i = (row(y) - 8.5)^2 + (col(y) - 8.5)^2 <= 4^2
i = (row(a) - 8.5)^2 + (col(a) - 8.5)^2 <= 4^2
i
a[i]
require(SPEI)
install.packages(SPEI)
install.packages("SPEI")
d <- data(wichita$PRCP)
d <- data(wichita)
require(SPEI)
data(wichita)
d <- wichita$PRCP
dim(d)
head(d)
str(d)
?spi
?cycle
cycle(presidents)
cycle(1:10)
knitr::opts_chunk$set(echo = TRUE)
library(ncdf4)
library(raster)
library(rgdal)
library(ggplot2)
library(assertthat)
library(lubridate)
chirps <- nc_open("../../data/interim/drought/chirps_selyear.nc")
print(chirps)
chirps_data<- ncvar_get(chirps, "precip")
#install.packages("genlasso")
library(genlasso)
?fusedlasso2d
edges = c(1,2,1,3,1,5,2,4,2,5,3,6,3,7,3,8,6,7,6,8)
edges
gr = graph(edges=edges,directed=FALSE)
gr
plot(gr)
y
y = c(1,1,0,1,1,0,0,0) + rnorm(8,0.1)
y
D = getDgSparse(gr)
a2 = fusedlasso(y, D=D)
plot(a1, numbers = TRUE)
a1 = fusedlasso(y, graph = gr)
plot(a1, numbers = TRUE)
?fusedlasso2d
knitr::opts_chunk$set(echo = FALSE)
knitr::include_graphics("../../figures/cross-degree.jpg")
knitr::include_graphics("../../figures/cross-degree.jpg")
#install.packages("genlasso")
library(genlasso)
edges = c(1,2,1,3,1,4,2,3,2,4,3,4)
gr = graph(edges = edges, directed = FALSE)
plot(gr)
y <- c(1,2,3,4) + rnorm(4,0.1)
X = matrix(c(1,2,3,4,1,1,1,1,2,2,2,2,4,3,2,2,4,4,3,3),
nrow = 4, ncol = 4, byrow = FALSE)
dim1 <- 2
dim2 <- 2
f <- fusedlasso2d(y,X,dim1,dim2)
plot(f)
X
y
gr
plot(gr)
edges = c(1,2,1,3,4)
gr = graph(edges = edges, directed = FALSE)
?graph
edges = c(1,2,1,4,1,5,2,3,2,4,2,5,2,6,3,5,3,6,4,5,5,6)
gr = graph(edges = edges, directed = FALSE)
plot(gr)
# I will need to build a network from the grid data
# actually will need to take the matrix and make an edge
# from every point to its neighbours if it has no NA
# !! maybe dont event need to do the graph
?fusedlasso2d
X
X = matrix(c(1,2,3,4,NA,NA,NA,NA,2,2,2,2,4,3,2,2,4,4,3,3),
nrow = 4, ncol = 4, byrow = FALSE)
dim1 <- 2
dim2 <- 2
f <- fusedlasso2d(y,X,dim1,dim2)
X
X = matrix(c(1,2,3,4,NA,NA,NA,1,2,2,2,2,4,3,2,2,4,4,3,3),
nrow = 4, ncol = 4, byrow = FALSE)
dim1 <- 2
dim2 <- 2
f <- fusedlasso2d(y,X,dim1,dim2)
plot(f)
f <- fusedlasso2d(y,X,dim1,dim2)
X = matrix(c(1,2,3,4,NA,NA,1,1,2,2,2,2,4,3,2,2,4,4,3,3),
nrow = 4, ncol = 4, byrow = FALSE)
f <- fusedlasso2d(y,X,dim1,dim2)
X = matrix(c(1,2,3,4,NA,1,1,1,2,2,2,2,4,3,2,2,4,4,3,3),
nrow = 4, ncol = 4, byrow = FALSE)
f <- fusedlasso2d(y,X,dim1,dim2)
X = matrix(c(1,2,3,4,1,1,1,1,2,2,2,2,4,3,2,2,4,4,3,3),
nrow = 4, ncol = 4, byrow = FALSE)
f <- fusedlasso2d(y,X,dim1,dim2)
plot(f)
# example matrix
m <- matrix(c(1,2,3,4,5,NA,6,7,8,9), ncol = 3, byrow = TRUE)
m
# example matrix
m <- matrix(c(1,2,3,4,5,NA,,7,8,9), ncol = 3, byrow = TRUE)
m
# example matrix
m <- matrix(c(1,2,3,4,5,NA,7,8,9), ncol = 3, byrow = TRUE)
m
# example matrix
m <- matrix(c(1,2,3,4,NA,5,7,8,9), ncol = 3, byrow = TRUE)
m
is.na(m)
# make vertical and horizontal edges for every node
m[1,]
# make vertical and horizontal edges for every node
is.na(m[1,])
# node is row number plus position in row vector - 1, 1 + 1 -1 = 1
# append edges vector, node at pos + node next for rows its simply +1
# for col its row + row length, so that next node is under it
is.na(c(m[1,1],m[1,2])
)
m[1,1]+m[1,2]
# node is row number plus position in row vector - 1, 1 + 1 -1 = 1
# append edges vector, node at pos + node next for rows its simply +1
# for col its row + row length, so that next node is under it
is.na(c(m[1,1],m[1,2]))
e <- c()
e <- append(e, c(1,2))
e
?edges
#install.packages("genlasso")
library(genlasso)
?graph
m
# example matrix
m <- matrix(c(1,2,3,4,NA,6,7,8,9), ncol = 3, byrow = TRUE)
m
# maybe keep going until there is no more NA
# or check where is NA and create rows for all other nodes
edges_true <- c(1,2,1,4,2,3,3,6,4,7,7,8,8,8)
gr = graph(edges = edges, directed = FALSE)
gr = graph(edges = edges_true, directed = FALSE)
gr
plot(gr)
m
# maybe keep going until there is no more NA
# or check where is NA and create rows for all other nodes
edges_true <- c(1,2,1,4,2,3,3,6,4,7,,6,97,8,8,9)
# maybe keep going until there is no more NA
# or check where is NA and create rows for all other nodes
edges_true <- c(1,2,1,4,2,3,3,6,4,7,,6,9,7,8,8,9)
gr = graph(edges = edges_true, directed = FALSE)
plot(gr)
m
# maybe keep going until there is no more NA
# or check where is NA and create rows for all other nodes
edges_true <- c(1,2,1,4,2,3,3,6,4,7,6,9,7,8,8,9)
gr = graph(edges = edges_true, directed = FALSE)
plot(gr)
graph_from_literal(A:B:C:D -- A:B:C:D)
plot(graph_from_literal(A:B:C:D -- A:B:C:D))
?graph
?edges
?ggraph
?igraph
?graph
?fusedlasso
360/5
100/5
25*25
900/4
30*25
26*7
750/625
750/182
12.07.22-17.01.22
as.Date(12.07.33)
as.Date("12.07.33")
?as.Date
z <- ISOdate(2022,01,12)
z
z <- ISOdate(2022,01,30)
z
z <- ISOdate(2022,20,30)
z
e <- ISOdate(2022,07,12)
h <- ISOdate(2022,01,17)
e
j
h
e-h
750/175
750/182
175/7
750/25
4.5*7
4.5*7*25
25*6
150/7
25*6
750/150
25*5
750/125
?prcomp
?clusGap
?cluster::clusGap
?prcomp
test <- prcomp(USArrests)
test <- prcomp(USArrests, scale. = TRUE)
test$rotation
svd
?svd
?prcomp
test2 <- svd(USArrests)
test$rotation
test2$v
?prcomp
df <- scale(USAccDeaths)
test2 <- svd(df)
test$rotation
test2$v
df
df <- scale(USArrests)
test2 <- svd(df)
test$rotation
test2$v
library(bookdown)
getwd()
setwd("Repos/MA-climate/")
preview_chapter("thesis/1b-EDA-precip.Rmd")
setwd("thesis/")
preview_chapter("thesis/1b-EDA-precip.Rmd")
preview_chapter("1b-EDA-precip.Rmd")
preview_chapter("1c-glyph-plots.Rmd")
