a <- c(1:10)
b <- c(1:10)
cor(a,b)
b <- c(10:20)
cor(a,b)
b <- c(10:19)
cor(a,b)
install.packages("genlasso")
edges = c(1,2,1,3,1,5,2,4,2,5,3,6,3,7,3,8,6,7,6,8)
gr = graph(edges=edges,directed=FALSE)
library(genlasso)
gr = graph(edges=edges,directed=FALSE)
plot(gr)
y = c(1,1,0,1,1,0,0,0) + rnorm(8,0.1)
y
a1 = fusedlasso(y, graph = gr)
D = getDgSparse(gr)
a2 = fusedlasso(y, D=D)
plot(a1, numbers = TRUE)
a1 = fusedlasso(y, graph = gr)
D = getDgSparse(gr)
a2 = fusedlasso(y, D=D)
plot(a1, numbers = TRUE)
?fusedlasso
?fusedlasso2d
library(genlasso)
set.seed(0)
edges = c(1,2,1,3,1,4,2,3,2,4,3,4)
gr = graph(edges = edges, directed = FALSE)
gr
plot(gr)
y = (1,2,3,4) + rnoerm(0,0.1)
y = (1,2,3,4) + rnorm(0,0.1)
y = c(1,2,3,4) + rnorm(0,0.1)
X = matrix(c(1,2,3,4,1,1,1,1,2,2,2,2,4,3,2,2),
nrow = 4, ncol = 4, byrow = TRUE)
X
X = matrix(c(1,2,3,4,1,1,1,1,2,2,2,2,4,3,2,2),
nrow = 4, ncol = 4, byrow = FALSE)
X
dim1 <- 2
dim2 <- 2
fusedlasso2d(y,X,dim1,dim2)
y
y = c(1,2,3,4) + rnorm(0,0.1)
fusedlasso2d(y,X,dim1,dim2)
y
y <- c(1,2,3,4) + rnorm(0,0.1)
fusedlasso2d(y,X,dim1,dim2)
fusedlasso2d(y = y,X,dim1,dim2)
fusedlasso2d(y = c(1,2,3,4) + rnorm(0,0.1),X,dim1,dim2)
X
X = matrix(c(1,2,3,4,1,1,1,1,2,2,2,2,4,3,2,2,4,4,3,3),
nrow = 4, ncol = 4, byrow = FALSE)
X
y
c(1,2,3,4) + rnorm(0,0.1)
rnorm(0,0.1)
c(1,2,3,4)
y <- c(1,2,3,4) + rnorm(4,0.1)
y
fusedlasso2d(y,X,dim1,dim2)
f <- fusedlasso2d(y,X,dim1,dim2)
plot(f)
row(X)
col(X)
a = matrix(runif(256), 16,16)
i = ()
i = (row(y) - 8.5)^2 + (col(y) - 8.5)^2 <= 4^2
i = (row(a) - 8.5)^2 + (col(a) - 8.5)^2 <= 4^2
i
a[i]
require(SPEI)
install.packages(SPEI)
install.packages("SPEI")
d <- data(wichita$PRCP)
d <- data(wichita)
require(SPEI)
data(wichita)
d <- wichita$PRCP
dim(d)
head(d)
str(d)
?spi
?cycle
cycle(presidents)
cycle(1:10)
knitr::opts_chunk$set(echo = TRUE)
library(ncdf4)
library(raster)
library(rgdal)
library(ggplot2)
library(assertthat)
library(lubridate)
chirps <- nc_open("../../data/interim/drought/chirps_selyear.nc")
print(chirps)
chirps_data<- ncvar_get(chirps, "precip")
#install.packages("genlasso")
library(genlasso)
?fusedlasso2d
edges = c(1,2,1,3,1,5,2,4,2,5,3,6,3,7,3,8,6,7,6,8)
edges
gr = graph(edges=edges,directed=FALSE)
gr
plot(gr)
y
y = c(1,1,0,1,1,0,0,0) + rnorm(8,0.1)
y
D = getDgSparse(gr)
a2 = fusedlasso(y, D=D)
plot(a1, numbers = TRUE)
a1 = fusedlasso(y, graph = gr)
plot(a1, numbers = TRUE)
?fusedlasso2d
knitr::opts_chunk$set(echo = FALSE)
knitr::include_graphics("../../figures/cross-degree.jpg")
knitr::include_graphics("../../figures/cross-degree.jpg")
#install.packages("genlasso")
library(genlasso)
edges = c(1,2,1,3,1,4,2,3,2,4,3,4)
gr = graph(edges = edges, directed = FALSE)
plot(gr)
y <- c(1,2,3,4) + rnorm(4,0.1)
X = matrix(c(1,2,3,4,1,1,1,1,2,2,2,2,4,3,2,2,4,4,3,3),
nrow = 4, ncol = 4, byrow = FALSE)
dim1 <- 2
dim2 <- 2
f <- fusedlasso2d(y,X,dim1,dim2)
plot(f)
X
y
gr
plot(gr)
edges = c(1,2,1,3,4)
gr = graph(edges = edges, directed = FALSE)
?graph
edges = c(1,2,1,4,1,5,2,3,2,4,2,5,2,6,3,5,3,6,4,5,5,6)
gr = graph(edges = edges, directed = FALSE)
plot(gr)
# I will need to build a network from the grid data
# actually will need to take the matrix and make an edge
# from every point to its neighbours if it has no NA
# !! maybe dont event need to do the graph
?fusedlasso2d
X
X = matrix(c(1,2,3,4,NA,NA,NA,NA,2,2,2,2,4,3,2,2,4,4,3,3),
nrow = 4, ncol = 4, byrow = FALSE)
dim1 <- 2
dim2 <- 2
f <- fusedlasso2d(y,X,dim1,dim2)
X
X = matrix(c(1,2,3,4,NA,NA,NA,1,2,2,2,2,4,3,2,2,4,4,3,3),
nrow = 4, ncol = 4, byrow = FALSE)
dim1 <- 2
dim2 <- 2
f <- fusedlasso2d(y,X,dim1,dim2)
plot(f)
f <- fusedlasso2d(y,X,dim1,dim2)
X = matrix(c(1,2,3,4,NA,NA,1,1,2,2,2,2,4,3,2,2,4,4,3,3),
nrow = 4, ncol = 4, byrow = FALSE)
f <- fusedlasso2d(y,X,dim1,dim2)
X = matrix(c(1,2,3,4,NA,1,1,1,2,2,2,2,4,3,2,2,4,4,3,3),
nrow = 4, ncol = 4, byrow = FALSE)
f <- fusedlasso2d(y,X,dim1,dim2)
X = matrix(c(1,2,3,4,1,1,1,1,2,2,2,2,4,3,2,2,4,4,3,3),
nrow = 4, ncol = 4, byrow = FALSE)
f <- fusedlasso2d(y,X,dim1,dim2)
plot(f)
# example matrix
m <- matrix(c(1,2,3,4,5,NA,6,7,8,9), ncol = 3, byrow = TRUE)
m
# example matrix
m <- matrix(c(1,2,3,4,5,NA,,7,8,9), ncol = 3, byrow = TRUE)
m
# example matrix
m <- matrix(c(1,2,3,4,5,NA,7,8,9), ncol = 3, byrow = TRUE)
m
# example matrix
m <- matrix(c(1,2,3,4,NA,5,7,8,9), ncol = 3, byrow = TRUE)
m
is.na(m)
# make vertical and horizontal edges for every node
m[1,]
# make vertical and horizontal edges for every node
is.na(m[1,])
# node is row number plus position in row vector - 1, 1 + 1 -1 = 1
# append edges vector, node at pos + node next for rows its simply +1
# for col its row + row length, so that next node is under it
is.na(c(m[1,1],m[1,2])
)
m[1,1]+m[1,2]
# node is row number plus position in row vector - 1, 1 + 1 -1 = 1
# append edges vector, node at pos + node next for rows its simply +1
# for col its row + row length, so that next node is under it
is.na(c(m[1,1],m[1,2]))
e <- c()
e <- append(e, c(1,2))
e
?edges
#install.packages("genlasso")
library(genlasso)
?graph
m
# example matrix
m <- matrix(c(1,2,3,4,NA,6,7,8,9), ncol = 3, byrow = TRUE)
m
# maybe keep going until there is no more NA
# or check where is NA and create rows for all other nodes
edges_true <- c(1,2,1,4,2,3,3,6,4,7,7,8,8,8)
gr = graph(edges = edges, directed = FALSE)
gr = graph(edges = edges_true, directed = FALSE)
gr
plot(gr)
m
# maybe keep going until there is no more NA
# or check where is NA and create rows for all other nodes
edges_true <- c(1,2,1,4,2,3,3,6,4,7,,6,97,8,8,9)
# maybe keep going until there is no more NA
# or check where is NA and create rows for all other nodes
edges_true <- c(1,2,1,4,2,3,3,6,4,7,,6,9,7,8,8,9)
gr = graph(edges = edges_true, directed = FALSE)
plot(gr)
m
# maybe keep going until there is no more NA
# or check where is NA and create rows for all other nodes
edges_true <- c(1,2,1,4,2,3,3,6,4,7,6,9,7,8,8,9)
gr = graph(edges = edges_true, directed = FALSE)
plot(gr)
graph_from_literal(A:B:C:D -- A:B:C:D)
plot(graph_from_literal(A:B:C:D -- A:B:C:D))
?graph
?edges
?ggraph
?igraph
?graph
?fusedlasso
360/5
100/5
25*25
900/4
30*25
26*7
750/625
750/182
12.07.22-17.01.22
as.Date(12.07.33)
as.Date("12.07.33")
?as.Date
z <- ISOdate(2022,01,12)
z
z <- ISOdate(2022,01,30)
z
z <- ISOdate(2022,20,30)
z
e <- ISOdate(2022,07,12)
h <- ISOdate(2022,01,17)
e
j
h
e-h
750/175
750/182
175/7
750/25
4.5*7
4.5*7*25
25*6
150/7
25*6
750/150
25*5
750/125
?prcomp
?clusGap
?cluster::clusGap
?prcomp
test <- prcomp(USArrests)
test <- prcomp(USArrests, scale. = TRUE)
test$rotation
svd
?svd
?prcomp
test2 <- svd(USArrests)
test$rotation
test2$v
?prcomp
df <- scale(USAccDeaths)
test2 <- svd(df)
test$rotation
test2$v
df
df <- scale(USArrests)
test2 <- svd(df)
test$rotation
test2$v
library(bookdown)
getwd()
setwd("Repos/MA-climate/")
preview_chapter("thesis/1b-EDA-precip.Rmd")
setwd("thesis/")
preview_chapter("thesis/1b-EDA-precip.Rmd")
preview_chapter("1b-EDA-precip.Rmd")
preview_chapter("1c-glyph-plots.Rmd")
getwd()
library(bookdown)
render_book()
?render_book
render_book(output_format = "html")
render_book()
mon_sd[[5]]
mon_mean[5]
mon_mean[[4]]
mean_locs_plot + sd_locs_plot
knitr::opts_chunk$set(echo=FALSE, warning = FALSE, message = FALSE)
library(ggplot2)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(raster)
library(patchwork)
source("../code/R/helper-functions.R")
world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)
theme_set(theme_bw())
ggplot(data = world) +
geom_sf() +
xlab("Longitude") + ylab("Latitude") +
ggtitle("World map", subtitle = paste0("(", length(unique(world$name)), " countries)"))
# helpers
plot_summary <- function(summary) {
df <- base::as.data.frame(cbind(coordinates(summary), summary@data@values))
colnames(df) <- c("Longitude","Latitude", "val")
plt <- ggplot(data = df, aes(x = Longitude, y = Latitude, fill = val)) +
geom_raster(interpolate = FALSE) +
scale_fill_gradient2(low = "red", high = "blue", midpoint = mean(df$val))
return(plt)
}
plot_trends <- function(data, trends) {
df <- base::as.data.frame(cbind(coordinates(data), trends))
colnames(df) <- c("Longitude","Latitude", "val")
plt <- ggplot(data = df, aes(x = Longitude, y = Latitude, fill = val)) +
geom_raster(interpolate = FALSE) +
scale_fill_gradient2(low = "red", high = "blue", midpoint = mean(df$val))
return(plt)
}
ggplot(data = world) +
geom_sf() +
coord_sf(xlim = c(-100,-20), ylim = c(40,-40), expand = TRUE) +   geom_rect(xmin = -70, xmax = -55, ymin = -10, ymax = 0,
fill = NA, colour = "black", size = 1.5)
precip <- brick("../data/interim/drought/chirps_setreftime.nc")
precip <- raster::aggregate(precip, fact = 10)
r_mean <- calc(precip, mean)
#plot(r_mean)
(mean_locs_plot <- plot_summary(r_mean) + ggtitle("Mean of precipitation for each location"))
df_mean <- data.frame(means = values(r_mean))
(mean_dens_plot<- ggplot(df_mean, aes(x = means)) + geom_density() + ggtitle("Density of means computed on each location"))
r_sd <- calc(precip, sd)
#plot(r_sd)
(sd_locs_plot <- plot_summary(r_sd) + ggtitle("SD of precipitation for each location"))
df_sd <- data.frame(sd = values(r_sd))
(sd_dens_plot <- ggplot(df_sd, aes(x = sd)) + geom_density())
mean_locs_plot
mean_locs_plot
mean_locs_plot + sd_locs_plot
mean_dens_plot + sd_dens_plot
(mean_dens_plot + ggtitle("test")) + sd_dens_plot
(mean_dens_plot + ggtitle("Density of means")) + sd_dens_plot("Density of sd")
(mean_dens_plot + ggtitle("Density of means")) + (sd_dens_plot + ggtitle("Density of sd"))
(mean_dens_plot + ggtitle("Density of means")) + (sd_dens_plot + ggtitle("Density of sds"))
(mean_dens_plot + ggtitle("Density of means")) + (sd_dens_plot + ggtitle("Density of sd"))
mon_mean[[1]] + mon_mean[[2]] + mon_mean[[3]] /
mon_mean[[4]] + mon_mean[[5]] + mon_mean[[6]] /
mon_mean[[7]] + mon_mean[[8]] + mon_mean[[9]] /
mon_mean[[10]] + mon_mean[[11]] + mon_mean[[12]]
length(mon_mean)
?facet_grid
library(ggpubr)
ggarrange(mon_mean[[1]], mon_mean[[2]], ncol = 2, nrow = 1, common.legend = TRUE, legend = "bottom")
ggarrange(c(mon_mean[[1:12]]), ncol = 4, nrow = 3, common.legend = TRUE, legend = "bottom")
ggarrange(c(mon_mean[1:12]), ncol = 4, nrow = 3, common.legend = TRUE, legend = "bottom")
?ggarrange
ggarrange(plotlist = mon_mean, ncol = 4, nrow = 3, common.legend = TRUE, legend = "bottom")
create_ind_mat <- function(precip_data) {
ind_mat <- matrix(NA, nrow = 12, ncol = nlayers(precip_data)/12)
for(i in 1:12) {
ind_mat[i,] <- seq(i, ncol(ind_mat), 12)
}
return(ind_mat)
}
mon_plots <- function(precip_data) {
ind_mat <- create_ind_mat(precip_data)
plot_list_m <- list()
plot_list_sd <- list()
pvals <- getValues(precip_data)
for(i in 1:nrow(ind_mat)) {
mon <- subset(precip_data, ind_mat[i,])
mon_means <- calc(mon, mean)
mon_sd <- calc(mon, sd)
m_plot <- plot_summary(mon_means) #+ ggtitle(paste("Means for month", i))
sd_plot <- plot_summary(mon_sd)  + ggtitle(paste("SD for month", i))
plot_list_m[[i]] <- m_plot
plot_list_sd[[i]] <- sd_plot
}
return(list(plot_list_m,plot_list_sd))
}
plt_list <- mon_plots(precip)
mon_mean <- plt_list[[1]]
mon_sd <- plt_list[[2]]
source("~/.active-rstudio-document", echo=TRUE)
library(ggpubr)
ggarrange(plotlist = mon_mean, ncol = 3, nrow = 4, common.legend = TRUE, legend = "bottom")
k <- ggarrange(plotlist = mon_mean, ncol = 3, nrow = 4, common.legend = TRUE, legend = "bottom")
l
k
mon_plots <- function(precip_data) {
ind_mat <- create_ind_mat(precip_data)
plot_list_m <- list()
plot_list_sd <- list()
pvals <- getValues(precip_data)
for(i in 1:nrow(ind_mat)) {
mon <- subset(precip_data, ind_mat[i,])
mon_means <- calc(mon, mean)
mon_sd <- calc(mon, sd)
m_plot <- plot_summary(mon_means) + ggtitle(paste("Means for month", i))
sd_plot <- plot_summary(mon_sd)  + ggtitle(paste("SD for month", i))
plot_list_m[[i]] <- m_plot
plot_list_sd[[i]] <- sd_plot
}
return(list(plot_list_m,plot_list_sd))
}
plt_list <- mon_plots(precip)
mon_mean <- plt_list[[1]]
l<- ggarrange(plotlist = mon_mean, ncol = 3, nrow = 4, common.legend = TRUE, legend = "bottom")
l
sd_arrange <- ggarrange(plotlist = sd_mean, ncol = 3, nrow = 4, common.legend = TRUE, legend = "bottom")
sd_arrange <- ggarrange(plotlist = mon_sd, ncol = 3, nrow = 4, common.legend = TRUE, legend = "bottom")
sd_arrange
```{r}
sd_arrange <- ggarrange(plotlist = mon_sd, ncol = 3, nrow = 4, common.legend = TRUE, legend = "bottom")
sd_arrange
sd_arrange
mean_arrange <- ggarrange(plotlist = mon_mean, ncol = 3, nrow = 4, common.legend = TRUE, legend = "bottom")
mean_arrange +theme(axis.text.x=element_blank(), #remove x axis labels
axis.ticks.x=element_blank(), #remove x axis ticks
axis.text.y=element_blank(),  #remove y axis labels
axis.ticks.y=element_blank()  #remove y axis ticks
)
mon_plots <- function(precip_data) {
ind_mat <- create_ind_mat(precip_data)
plot_list_m <- list()
plot_list_sd <- list()
pvals <- getValues(precip_data)
for(i in 1:nrow(ind_mat)) {
mon <- subset(precip_data, ind_mat[i,])
mon_means <- calc(mon, mean)
mon_sd <- calc(mon, sd)
m_plot <- plot_summary(mon_means) + ggtitle(paste("Means for month", i)) +
theme(axis.text.x=element_blank(), #remove x axis labels
axis.ticks.x=element_blank(), #remove x axis ticks
axis.text.y=element_blank(),  #remove y axis labels
axis.ticks.y=element_blank()  #remove y axis ticks
)
sd_plot <- plot_summary(mon_sd)  + ggtitle(paste("SD for month", i))
plot_list_m[[i]] <- m_plot
plot_list_sd[[i]] <- sd_plot
}
return(list(plot_list_m,plot_list_sd))
}
plt_list <- mon_plots(precip)
plt_list <- mon_plots(precip)
mon_mean <- plt_list[[1]]
mean_arrange <- ggarrange(plotlist = mon_mean, ncol = 3, nrow = 4, common.legend = TRUE, legend = "bottom")
mean_arrange
mon_plots <- function(precip_data) {
ind_mat <- create_ind_mat(precip_data)
plot_list_m <- list()
plot_list_sd <- list()
pvals <- getValues(precip_data)
for(i in 1:nrow(ind_mat)) {
mon <- subset(precip_data, ind_mat[i,])
mon_means <- calc(mon, mean)
mon_sd <- calc(mon, sd)
m_plot <- plot_summary(mon_means) + ggtitle(paste("Means for month", i)) +
theme(axis.text.x=element_blank(), #remove x axis labels
axis.ticks.x=element_blank(), #remove x axis ticks
axis.text.y=element_blank(),  #remove y axis labels
axis.ticks.y=element_blank(), #remove y axis ticks
axis.title.x = element_blank(),
axis.title.y = element_blank()
)
sd_plot <- plot_summary(mon_sd)  + ggtitle(paste("SD for month", i))
plot_list_m[[i]] <- m_plot
plot_list_sd[[i]] <- sd_plot
}
return(list(plot_list_m,plot_list_sd))
}
plt_list <- mon_plots(precip)
plt_list <- mon_plots(precip)
mon_mean <- plt_list[[1]]
mean_arrange <- ggarrange(plotlist = mon_mean, ncol = 3, nrow = 4, common.legend = TRUE, legend = "bottom")
mean_arrange
# plot a summary done by raster calc function, f.e plot(precip, calc(precip, mean))
# in: here, precip <- aggregate::precip() and the summary computed by calc()
# out: plot showing the summary on a map
plot_summary <- function(data, summary) {
df <- base::as.data.frame(cbind(coordinates(data), summary@data@values))
colnames(df) <- c("Longitude","Latitude", "val")
plt <- ggplot(data = df, aes(x = Longitude, y = Latitude, fill = val)) +
geom_raster(interpolate = FALSE) +
scale_fill_gradient2(low = "red", high = "blue")#, midpoint = mean(df$val))
plt
}
