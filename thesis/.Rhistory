bplus <- apply(err_mat, 1, max)
bmin <- apply(err_mat, 1, min)
errbar(lambda_id, mse, b+bplus, b-bmin)
# which.min(b)
# bs <- b[40:100]
# bbpluss <- (b+bplus)[40:100]
# bbmins <- (b-bmin)[40:100]
# (bs > bbpluss) | (bs < bbmins)
bmin <- which.min(b)
tv <- (b+bplus)[bmin]
tz <- b+bplus
tz <- tz[(bmin+1):100]
w <- tv < tz
#bmin is 40
#w ist bei 45 true
#l1se <- 45
p1 <- readRDS("../results/CV-lasso/cv-lasso-og-scale/err-mat-plots/err-plot-fold-1.rds")
p2 <- readRDS("../results/CV-lasso/cv-lasso-og-scale/err-mat-plots/err-plot-fold-2.rds")
p3 <- readRDS("../results/CV-lasso/cv-lasso-og-scale/err-mat-plots/err-plot-fold-3.rds")
p4 <- readRDS("../results/CV-lasso/cv-lasso-og-scale/err-mat-plots/err-plot-fold-4.rds")
p5 <- readRDS("../results/CV-lasso/cv-lasso-og-scale/err-mat-plots/err-plot-fold-5.rds")
p1 + p2 + p3 + p4 + p5
apply(err_mat, 2, min)
apply(err_mat, 2, function(x) which.min(x))
pc1 <- readRDS("../results/CV-lasso/cv-lasso-og-scale/coef-plots/coef-plot-fold-1.rds")
pc2 <- readRDS("../results/CV-lasso/cv-lasso-og-scale/coef-plots/coef-plot-fold-2.rds")
pc3 <- readRDS("../results/CV-lasso/cv-lasso-og-scale/coef-plots/coef-plot-fold-3.rds")
pc4 <- readRDS("../results/CV-lasso/cv-lasso-og-scale/coef-plots/coef-plot-fold-4.rds")
pc5 <- readRDS("../results/CV-lasso/cv-lasso-og-scale/coef-plots/coef-plot-fold-5.rds")
l <- list(pc1,pc2,pc3,pc4,pc5)
ggarrange(plotlist = l, ncol = 3, nrow = 2,
common.legend = TRUE)
# q <- ggplot_build(pc1)
# q$data[[1]]$linetype <- 21
# pc1$layers[[2]]$aes_params$shape <- 21
# pc1$data
# pc1$layers[[2]]
# q <- ggplot_gtable(q)
# plot(q)
#
# q <- ggplot_build(pc1)
# load data
target_path <- "../data/interim/drought/chirps_setreftime_aggregated.rds"
features_path <- "../data/interim/sst/ersst_setreftime.nc"
target <- load_data(target_path)
target <- apply(getValues(target), 2, mean)
features <- load_data(features_path, "sst")
features <- t(features)
features <- prepare_sst(features)
features <- scale(features, center = TRUE, scale = FALSE)
#plot(ts(target))
# get indices
lambdas <- readRDS("../results/CV-lasso/cv-lasso-og-scale/lambda-vec.rds")
ids <- readRDS("../results/CV-lasso/cv-lasso-og-scale/index-list.rds")
f1_train <- ids$train$Training060
f1_test <- ids$test$Testing060
x1_train <- features[f1_train,]
y1_train <- target[f1_train]
x1_test <- features[f1_test,]
y1_test <- target[f1_test]
min1 <- which.min(err_mat[,1])
m1 <- glmnet(x1_train, y1_train, lambda=rev(lambdas)[min1], standardize = FALSE)
preds1 <- predict(object = m1, newx = x1_test)
df <- data.frame(preds = preds1, target = y1_test, check.names=TRUE)
ggplot() + geom_line(data = df, mapping = aes(x=1:14, y=s0, colour = "blue")) +
geom_line(data = df, mapping= aes(x=1:14, y=target))
f2_train <- ids$train$Training134
f2_test <- ids$test$Testing134
x2_train <- features[f2_train,]
y2_train <- target[f2_train]
x2_test <- features[f2_test,]
y2_test <- target[f2_test]
min2 <- which.min(err_mat[,2])
m2 <- glmnet(x2_train, y2_train, lambda=rev(lambdas)[min2], standardize = FALSE)
preds2 <- predict(m2, newx = x2_test)
df <- data.frame(preds = preds2, target = y2_test)
ggplot() + geom_line(data = df, mapping = aes(x=1:14, y=s0, colour = "blue")) +
geom_line(data = df, mapping= aes(x=1:14, y=target))
f3_train <- ids$train$Training208
f3_test <- ids$test$Testing208
x3_train <- features[f3_train,]
y3_train <- target[f3_train]
x3_test <- features[f3_test,]
y3_test <- target[f3_test]
min3 <- which.min(err_mat[,3])
m3 <- glmnet(x3_train, y3_train, lambda=rev(lambdas)[min3], standardize = FALSE)
preds3 <- predict(m3, newx = x3_test)
df <- data.frame(preds = preds3, target = y3_test)
ggplot() + geom_line(data = df, mapping = aes(x=1:14, y=s0, colour = "blue")) +
geom_line(data = df, mapping= aes(x=1:14, y=target))
f4_train <- ids$train$Training282
f4_test <- ids$test$Testing282
x4_train <- features[f4_train,]
y4_train <- target[f4_train]
x4_test <- features[f4_test,]
y4_test <- target[f4_test]
min4 <- which.min(err_mat[,4])
m4 <- glmnet(x4_train, y4_train, lambda=rev(lambdas)[min4], standardize = FALSE)
preds4 <- predict(m4, newx = x4_test)
df <- data.frame(preds = preds4, target = y4_test)
ggplot() + geom_line(data = df, mapping = aes(x=1:14, y=s0, colour = "blue")) +
geom_line(data = df, mapping= aes(x=1:14, y=target))
f5_train <- ids$train$Training356
f5_test <- ids$test$Testing356
x5_train <- features[f5_train,]
y5_train <- target[f5_train]
x5_test <- features[f5_test,]
y5_test <- target[f5_test]
min5 <- which.min(err_mat[,5])
m5 <- glmnet(x5_train, y5_train, lambda=rev(lambdas)[min5], standardize = FALSE)
preds5 <- predict(m5, newx = x5_test)
df <- data.frame(preds = preds5, target = y5_test)
ggplot() + geom_line(data = df, mapping = aes(x=1:14, y=s0, colour = "blue")) +
geom_line(data = df, mapping= aes(x=1:14, y=target))
# fit model with best lambda
#which.min(b)
lambdas <- readRDS("../results/CV-lasso/cv-lasso-og-scale/lambda-vec.rds")
minmin <- which.min(apply(err_mat, 1, mean))
#minmin <- 83# WOW last plot was created with this lambda
best_lambda <- rev(lambdas)[minmin]
#dim(features)
m_full <- glmnet(features[1:370,], target[1:370], lambda = best_lambda, standardize = FALSE)
preds_full <- predict(m_full, newx = features[371:432,],
lambda = best_lambda)
df <- data.frame(preds = preds_full, target = target[371:432])
#dim(preds_full)
ggplot() + geom_line(data = df, mapping = aes(x=1:62, y=s0, colour = "blue")) +
geom_line(data = df, mapping= aes(x=1:62, y=target))
sqrt(mean((df$s0 - df$target)^2))
mean((df$s0 - df$target)^2)
# what if we fit whole model and check then?
#best_lambda <- rev(lambdas)[minmin]
#dim(features)
m_full2 <- glmnet(features[1:370,], target[1:370], lambda = rev(lambdas), standardize = FALSE)
test <- predict.glmnet(m_full2, newx = features[1:370,])
v <- apply(test,2,function(x) mean((x-target[1:370])^2))
v <- unname(v)
best_l <- which.min(v)
best_l
test <- predict.glmnet(m_full2, newx = features[1:370,], s=rev(lambdas))
v <- apply(test,2,function(x) mean((x-target[1:370])^2))
v
best_l <- which.min(v)
best_l
v <- unname(v)
best_l <- which.min(v)
best_l
test <- predict.glmnet(m_full2, newx = features[1:370,], s=rev(lambdas))
dim(test)
v <- apply(test,2,function(x) mean((x-target[1:370])^2))
v
v <- unname(v)
best_l <- which.min(v)
# preds_full2 <- predict.glmnet(m_full2, newx = features[371:432,], s = rev(lambdas))
# v <- apply(preds_full2,2,function(x) mean((x-target[371:432])^2))
# v <- unname(v)
# best_l <- which.min(v)
df2 <- data.frame(preds = preds_full2[,best_l], target = target[371:432])
preds_full2 <- predict.glmnet(m_full2, newx = features[371:432,], s = rev(lambdas))
v <- apply(preds_full2,2,function(x) mean((x-target[371:432])^2))
test <- predict.glmnet(m_full2, newx = features[1:370,], s=rev(lambdas))
dim(test)
v <- apply(test,2,function(x) mean((x-target[1:370])^2))
v <- unname(v)
best_l <- which.min(v)
preds_full2 <- predict.glmnet(m_full2, newx = features[371:432,], s = rev(lambdas)[best_l])
best_l <- which.min(v)
df2 <- data.frame(preds = preds_full2[,best_l], target = target[371:432])
df2 <- data.frame(preds = preds_full2, target = target[371:432])
#dim(preds_full)
ggplot() + geom_line(data = df2, mapping = aes(x=1:62, y=preds, colour = "blue")) +
geom_line(data = df, mapping= aes(x=1:62, y=target))
#dim(preds_full)
ggplot() + geom_line(data = df2, mapping = aes(x=1:62, y=s0, colour = "blue")) +
geom_line(data = df, mapping= aes(x=1:62, y=target))
df2
#dim(preds_full)
ggplot() + geom_line(data = df2, mapping = aes(x=1:62, y=X1, colour = "blue")) +
geom_line(data = df, mapping= aes(x=1:62, y=target))
plot(test[,best_l])
plot(ts(test[,best_l]))
plot(ts(v))
rev(lambdas)
preds_full2 <- predict.glmnet(m_full2, newx = features[371:432,], s = 0.05)
df2 <- data.frame(preds = preds_full2, target = target[371:432])
#dim(preds_full)
ggplot() + geom_line(data = df2, mapping = aes(x=1:62, y=X1, colour = "blue")) +
geom_line(data = df, mapping= aes(x=1:62, y=target))
preds_full2 <- predict.glmnet(m_full2, newx = features[371:432,], s = 0.01)
df2 <- data.frame(preds = preds_full2, target = target[371:432])
#dim(preds_full)
ggplot() + geom_line(data = df2, mapping = aes(x=1:62, y=X1, colour = "blue")) +
geom_line(data = df, mapping= aes(x=1:62, y=target))```
preds_full2
df2 <- data.frame(preds = preds_full2, target = target[371:432])
#dim(preds_full)
ggplot() + geom_line(data = df2, mapping = aes(x=1:62, y=X1, colour = "blue")) +
geom_line(data = df, mapping= aes(x=1:62, y=target))```
#dim(preds_full)
ggplot() + geom_line(data = df2, mapping = aes(x=1:62, y=X1, colour = "blue")) +
geom_line(data = df, mapping= aes(x=1:62, y=target))
preds_full2 <- predict.glmnet(m_full2, newx = features[371:432,], s = 0.001)
df2 <- data.frame(preds = preds_full2, target = target[371:432])
#dim(preds_full)
ggplot() + geom_line(data = df2, mapping = aes(x=1:62, y=X1, colour = "blue")) +
geom_line(data = df, mapping= aes(x=1:62, y=target))
preds_full2 <- predict.glmnet(m_full2, newx = features[371:432,], s = 0.00001)
df2 <- data.frame(preds = preds_full2, target = target[371:432])
#dim(preds_full)
ggplot() + geom_line(data = df2, mapping = aes(x=1:62, y=X1, colour = "blue")) +
geom_line(data = df, mapping= aes(x=1:62, y=target))
preds_full2 <- predict.glmnet(m_full2, newx = features[371:432,], s = 0.0000000001)
df2 <- data.frame(preds = preds_full2, target = target[371:432])
#dim(preds_full)
ggplot() + geom_line(data = df2, mapping = aes(x=1:62, y=X1, colour = "blue")) +
geom_line(data = df, mapping= aes(x=1:62, y=target))
ids
# what if we fit whole model and check then?
#best_lambda <- rev(lambdas)[minmin]
#dim(features)
m_full2 <- glmnet(features[1:300,], target[1:300], lambda = rev(lambdas), standardize = FALSE)
test <- predict.glmnet(m_full2, newx = features[301:370,], s=rev(lambdas))
dim(test)
v <- apply(test,2,function(x) mean((x-target[301:370])^2))
v <- unname(v)
best_l
preds_full2 <- predict.glmnet(m_full2, newx = features[371:432,], s = rev(lambdas)[best_l])
#preds_full2 <- predict.glmnet(m_full2, newx = features[371:432,], s = 0.0000000001)
df2 <- data.frame(preds = preds_full2, target = target[371:432])
#dim(preds_full)
ggplot() + geom_line(data = df2, mapping = aes(x=1:62, y=X1, colour = "blue")) +
geom_line(data = df, mapping= aes(x=1:62, y=target))
# what if we fit whole model and check then?
#best_lambda <- rev(lambdas)[minmin]
#dim(features)
m_full2 <- glmnet(features[1:300,], target[1:300], lambda = rev(lambdas), standardize = FALSE)
test <- predict.glmnet(m_full2, newx = features[301:370,], s=rev(lambdas))
dim(test)
v <- apply(test,2,function(x) mean((x-target[301:370])^2))
v <- unname(v)
best_l <- which.min(v)
#STOP we could do cv on 300 test 70 train, get best lambda and refit on all data
#next evaluate on train
preds_full2 <- predict.glmnet(m_full2, newx = features[371:432,], s = rev(lambdas)[best_l])
#preds_full2 <- predict.glmnet(m_full2, newx = features[371:432,], s = 0.0000000001)
df2 <- data.frame(preds = preds_full2, target = target[371:432])
#dim(preds_full)
ggplot() + geom_line(data = df2, mapping = aes(x=1:62, y=X1, colour = "blue")) +
geom_line(data = df, mapping= aes(x=1:62, y=target))
best_l
# what if we fit whole model and check then?
#best_lambda <- rev(lambdas)[minmin]
#dim(features)
m_full2 <- glmnet(features[1:300,], target[1:300], lambda = rev(lambdas), standardize = FALSE)
test <- predict.glmnet(m_full2, newx = features[301:370,], s=rev(lambdas))
dim(test)
v <- apply(test,2,function(x) mean((x-target[301:370])^2))
v <- unname(v)
best_l <- which.min(v)
v
v
best_l
#STOP we could do cv on 300 test 70 train, get best lambda and refit on all data
#next evaluate on train
m_full2 <- glmnet(features[1:370,], target[1:370], lambda = rev(lambdas)[best_l], standardize = FALSE)
preds_full2 <- predict.glmnet(m_full2, newx = features[371:432,])
#preds_full2 <- predict.glmnet(m_full2, newx = features[371:432,], s = 0.0000000001)
df2 <- data.frame(preds = preds_full2, target = target[371:432])
#dim(preds_full)
ggplot() + geom_line(data = df2, mapping = aes(x=1:62, y=X1, colour = "blue")) +
geom_line(data = df, mapping= aes(x=1:62, y=target))
#dim(preds_full)
ggplot() + geom_line(data = df2, mapping = aes(x=1:62, y=s0, colour = "blue")) +
geom_line(data = df, mapping= aes(x=1:62, y=target))
# what if we fit whole model and check then?
#best_lambda <- rev(lambdas)[minmin]
#dim(features)
m_full2 <- glmnet(features[1:330,], target[1:330], lambda = rev(lambdas), standardize = FALSE)
test <- predict.glmnet(m_full2, newx = features[331:370,], s=rev(lambdas))
dim(test)
v <- apply(test,2,function(x) mean((x-target[331:370])^2))
v <- unname(v)
best_l <- which.min(v)
best_l
#STOP we could do cv on 300 test 70 train, get best lambda and refit on all data
#next evaluate on train
m_full2 <- glmnet(features[1:370,], target[1:370], lambda = rev(lambdas)[best_l], standardize = FALSE)
preds_full2 <- predict.glmnet(m_full2, newx = features[371:432,])
#preds_full2 <- predict.glmnet(m_full2, newx = features[371:432,], s = 0.0000000001)
df2 <- data.frame(preds = preds_full2, target = target[371:432])
#dim(preds_full)
ggplot() + geom_line(data = df2, mapping = aes(x=1:62, y=s0, colour = "blue")) +
geom_line(data = df, mapping= aes(x=1:62, y=target))
?scale()
60/7.37
8/60
13*20000
13*20000/60
8/60*20000
8/60*20000/60
617/94
617/94 * 20000
617/94 * 20000 / 60
617/94 * 20000 / 60 / 60
(18*60+18)/ 175
(18*60+18)/ 175 * 20000 / 60 / 60
(38*60+36)/ 450 * 20000 / 60 / 60
estimate_runtime <- function(min,sec, steps) {
rt <- (min*60+sec) / steps * 20000 / 60 / 60
return(rt)
}
estimate_runtime(6,30,120)
estimate_runtime(11,06,220)
estimate_runtime(0,30,480)
estimate_runtime(32,06,480)
estimate_runtime(32,06,520)
estimate_runtime(46,23,755)
estimate_runtime(71,11,1270)
estimate_runtime(71,36,1270)
seconds(100)
time(x = )
?time
estimate_runtime <- function(hours,min,sec, steps) {
rt <- ((hours*3600)+(min*60+sec)) / steps * 20000 / 60 / 60
return(rt)
}
estimate_runtime(3,47,36,5570)
estimate_runtime(3,47,25,5570)
estimate_runtime(4,0,12,5920)
sarah <- "miau"
dario <- "miau"
paste(sara, dario)
paste(sarah, dario)
a <- 1
b <- 2
a + b
a <- c(1:10)
a
a[1]
a[5]
for(i in a) {
print(i)
}
4*5
55
5*5
miau <- function(n) {
resultad <- n*5
return(resultad)
}
miau(3)
miau(9)
sarah <- "miau"
dario <- "miau"
paste(sarah, dario)
knitr::opts_chunk$set(warning = FALSE, message = FALSE, echo = FALSE)
library(patchwork)
library(ggpubr)
library(raster)
library(glmnet)
library(Hmisc)
source("../code/R/helper-functions.R")
path_to_model_folder <- "../results/CV-fused/large-fused-5k/"
pc3 <- readRDS(paste0(path_to_model_folder, "/coef-plots/coef-plot-fold-3.rds"))
pc3
rm(pc3)
pc4 <- readRDS(paste0(path_to_model_folder, "/coef-plots/coef-plot-fold-4.rds"))
pc4
rm(pc4)
pc5 <- readRDS(paste0(path_to_model_folder, "/coef-plots/coef-plot-fold-5.rds"))
pc5
rm(pc5)
pc5 <- readRDS(paste0(path_to_model_folder, "/coef-plots/coef-plot-fold-5.rds"))
pc5 <- readRDS(paste0(path_to_model_folder, "/coef-plots/coef-plot-fold-5.rds"))
pc5
object.size(pc5)
?object.size
object.size(pc5, unites = "Gb")
object.size(pc5, unites = "G")
object.size(pc5)
dim(pc5$data)
dim(pc5$data[[1]])
dim(pc5$data[[2]])
dim(pc5$data)
pc5$data
pc5$layers
pc5$data
options(knitr.duplicate.label = "allow")
library(bookdown)
render_book("thesis")
setwd("Repos/MA-climate/")
render_book("thesis")
render_book("thesis")
knitr::opts_chunk$set(echo=FALSE, warning = FALSE, message = FALSE)
#knitr::opts_knit$set(root.dir="../")
source("../code/R/helper-functions.R")
render_book("thesis")
rm(list=ls())
preview_chapter("thesis/5rr-cv-fused-5k-stand-gamma-01.Rmd")
preview_chapter("thesis")
preview_chapter("thesis")
preview_chapter("thesis")
preview_chapter("thesis")
preview_chapter("thesis/5rr-cv-fused-5k-stand-gamma-01.Rmd")
preview_chapter("thesis/5rr-cv-fused-5k-stand-gamma-01")
preview_chapter("5rr-cv")
?preview_chapter
setwd("thesis/")
preview_chapter("5rr-cv-fused-5k-stand-gamma-01.Rmd")
path_to_model_folder <- "../results/CV-fused/small-fused-1k-stand-gamma-01/"
pc1 <- readRDS(paste0(path_to_model_folder, "/coef-plots/coef-plot-fold-1.rds"))
pc1 <- readRDS(paste0(path_to_model_folder, "/coef-plots/coef-plot-drop-out-fold-1.rds"))
pc1 <- readRDS(paste0(path_to_model_folder, "/coef-plots/coef-plot-fold-1.rds"))
pc2 <- readRDS(paste0(path_to_model_folder, "/coef-plots/coef-plot-fold-2.rds"))
pc3 <- readRDS(paste0(path_to_model_folder, "/coef-plots/coef-plot-fold-3.rds"))
pc4 <- readRDS(paste0(path_to_model_folder, "/coef-plots/coef-plot-fold-4.rds"))
pc5 <- readRDS(paste0(path_to_model_folder, "/coef-plots/coef-plot-fold-5.rds"))
l <- list(pc1,pc2,pc3,pc4,pc5)
rm(list=(pc1,pc2,pc3,pc4,pc5))
rm(list=pc1,pc2,pc3,pc4,pc5)
?rm
a <- 2
b <- 3
c <- 4
rm(a,b,c)
rm(pc1,pc2,pc3,pc4,pc5)
a1 <- ggarrange(plotlist = l, ncol = 3, nrow = 2,
common.legend = TRUE)
a1
knitr::opts_chunk$set(warning = FALSE, message = FALSE, echo = FALSE)
library(patchwork)
library(ggpubr)
library(raster)
library(glmnet)
library(Hmisc)
source("../code/R/helper-functions.R")
# inspect error plots
# inspect coef plots
# inspect prediction plots
# length(ids$train$Training060)
# length(ids$test$Testing060)
path_to_model_folder <- "../results/CV-fused/small-fused-1k/"
err_mat <- readRDS(paste0(path_to_model_folder, "/err-mat.rds"))
#lambdas <- readRDS(paste0(path_to_model_folder, "/lambda-vec.rds"))
err_line_plot <- readRDS(paste0(path_to_model_folder, "/err-mat-plots/err-line-plot.rds"))
err_line_plot
# a <- ggplot_build(err_bars_plot)
rm(err_line_plot)
p1 <- readRDS(paste0(path_to_model_folder, "/err-mat-plots/err-plot-fold1.rds"))
p2 <- readRDS(paste0(path_to_model_folder, "/err-mat-plots/err-plot-fold2.rds"))
p3 <- readRDS(paste0(path_to_model_folder, "/err-mat-plots/err-plot-fold3.rds"))
p4 <- readRDS(paste0(path_to_model_folder, "/err-mat-plots/err-plot-fold4.rds"))
p5 <- readRDS(paste0(path_to_model_folder, "/err-mat-plots/err-plot-fold5.rds"))
p1 + p2 + p3 + p4 + p5
err_mat_p_list <- list(p1,p2,p3,p4,p5)
err_mat_resc_list <- replot_err_mat(err_mat_p_list)
err_mat_resc_list[[1]] + err_mat_resc_list[[2]] + err_mat_resc_list[[3]] + err_mat_resc_list[[4]] + err_mat_resc_list[[5]]
apply(err_mat, 2, min)
#apply(err_mat, 2, function(x) lambdas[which.min(x)])
pc1 <- readRDS(paste0(path_to_model_folder, "/coef-plots/coef-plot-fold-1.rds"))
pc2 <- readRDS(paste0(path_to_model_folder, "/coef-plots/coef-plot-fold-2.rds"))
pc3 <- readRDS(paste0(path_to_model_folder, "/coef-plots/coef-plot-fold-3.rds"))
pc4 <- readRDS(paste0(path_to_model_folder, "/coef-plots/coef-plot-fold-4.rds"))
pc5 <- readRDS(paste0(path_to_model_folder, "/coef-plots/coef-plot-fold-5.rds"))
l <- list(pc1,pc2,pc3,pc4,pc5)
rm(pc1,pc2,pc3,pc4,pc5)
a1 <- ggarrange(plotlist = l, ncol = 3, nrow = 2,
common.legend = TRUE)
a1
rm()
pc1 <- readRDS(paste0(path_to_model_folder, "/coef-plots/coef-plot-drop-out-fold-1.rds"))
pc2 <- readRDS(paste0(path_to_model_folder, "/coef-plots/coef-plot-drop-out-fold-2.rds"))
pc3 <- readRDS(paste0(path_to_model_folder, "/coef-plots/coef-plot-drop-out-fold-3.rds"))
pc4 <- readRDS(paste0(path_to_model_folder, "/coef-plots/coef-plot-drop-out-fold-4.rds"))
pc5 <- readRDS(paste0(path_to_model_folder, "/coef-plots/coef-plot-drop-out-fold-5.rds"))
l2 <- list(pc1,pc2,pc3,pc4,pc5)
rm(pc1,pc2,pc3,pc4,pc5)
a2 <- ggarrange(plotlist = l2, ncol = 3, nrow = 2,
common.legend = TRUE)
a2
pred_plot_1 <- readRDS(paste0(path_to_model_folder, "/pred-plots/pred-plot-fold-1.rds"))
#pred_plot_1
mse_1 <- get_mse_from_pred_plot(pred_plot_1)
pred_plot_2 <- readRDS(paste0(path_to_model_folder, "/pred-plots/pred-plot-fold-2.rds"))
#pred_plot_2
mse_2 <- get_mse_from_pred_plot(pred_plot_2)
pred_plot_3 <- readRDS(paste0(path_to_model_folder, "/pred-plots/pred-plot-fold-3.rds"))
#pred_plot_3
mse_3 <- get_mse_from_pred_plot(pred_plot_3)
pred_plot_4 <- readRDS(paste0(path_to_model_folder, "/pred-plots/pred-plot-fold-4.rds"))
#pred_plot_4
mse_4 <- get_mse_from_pred_plot(pred_plot_4)
pred_plot_5 <- readRDS(paste0(path_to_model_folder, "/pred-plots/pred-plot-fold-5.rds"))
#pred_plot_5
mse_5 <- get_mse_from_pred_plot(pred_plot_5)
pred_plot_list <- list(pred_plot_1,pred_plot_2,pred_plot_3,pred_plot_4,pred_plot_5)
#lapply(pred_plot_list, get_mse_from_pred_plot)
pred_plot_1 + pred_plot_2 + pred_plot_3 + pred_plot_4 +
pred_plot_5
best_l_res <- readRDS(paste0(path_to_model_folder, "best-lambda-res.rds"))
best_l_res
rm(best_l_res)
err_line_full <- readRDS(paste0(path_to_model_folder, "err-mat-plots/error-line-plot-full.rds"))
err_line_full
rm(err_line_full)
pred_plot_full <- readRDS(paste0(path_to_model_folder, "pred-plots/pred-plot-full.rds"))
attr(pred_plot_full, "mse")
pred_plot_full
coef_full <- readRDS(paste0(path_to_model_folder, "coef-plots/coef-plot-full.rds"))
coef_full
coef_full_drop <- readRDS(paste0(path_to_model_folder, "coef-plots/coef-plot-drop-out-full.rds"))
coef_full_drop
